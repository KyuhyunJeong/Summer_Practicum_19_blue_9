---
title: "Exploration"
author: "Tommy Lang"
date: "7/3/2018"
output:
  html_notebook:
    code_folding: hide
    df_print: paged
    fig_height: 4
    fig_width: 7
    highlight: tango
    number_sections: yes
    theme: readable
    toc: yes
    toc_float: yes
---

# Packages, Data and Custom Functions

Custom Functions:
This code chunk contains custom fucntions that I use to help automate or make
tasks easier.
```{r message=FALSE}
LoadPackages <- function(packages) {
  # Load or install packages if they aren't already loaded.
  #
  # Args:
  #   packages: a vector of package names
  #
  for (package in packages) {
    if (!require(package, character.only=T, quietly=T)) {
      if (!package %in% installed.packages()) install.packages(package)
      library(package, character.only=T)
    }
  }
}

ColNa <- function(df) {
  # Return a vector of column names that have NA values
  #
  # Args:
  # df: data frame 
  #
  # Returns:
  #  vector of column names that have NAs 
  df <- tbl_df(df)
  v <- c()
  j <- 1
  for(i in 1:ncol(df)) {
    x <- df[ ,i]
    xRmvNA <- x[!is.na(x),]
    lenx <- nrow(x)
    lenxRmvNA <- nrow(xRmvNA)
    if(lenx != lenxRmvNA ) {
      v[j] <- colnames(df[ ,i])
      j <- j+1
    }
  }
  return(v)
}

ReplaceNonNum <- function(x) {
  str_replace_all(x, "[^.0-9]+", "")
}
```

Load Packages:
Packages contain functions that others write that help with doing stuff
```{r, results=FALSE}
# I use my custom function LoadPackages to load or install packages
LoadPackages(c("dplyr", "haven", "stringr", "tidyr", "ggplot2"))
```


Read in data
```{r results = FALSE}
data_path <- 'E:/Tommy/Original_Data/Data'
# The list.files function gets the file names in a specified directory
# file_names contains the file names of all the data sets
file_names <- list.files(path = data_path, recursive = TRUE)

# Initialize a vector to hold data frame names
df_names <- c()
i <- 1

# This loop goes through the file names and reads it into R
for(name in file_names) {
  # create variable name for df
  df_name <- str_replace_all(name, " |_with_ann2|.sas7bdat|/acs_16_5yr|_records", "")
  # read in data
  df <- read_sas(paste0(data_path, "/", name))
  df <- df %>% mutate_all(funs(as.character(.)))
  # attach df to variable name
  assign(df_name, df) 
  print(paste0("done with: ", df_name, " ", i,"/",length(file_names)))
  i <- i+1
  # add the current iteration of the data frame name to the df_names vector
  df_names <- c(df_names, df_name)
}
```

Response Variable
```{r}
end <- which(names(rx_trx) == "TRx_09302015")
beg <- which(names(rx_trx) == "TRx_08312017")
rx_trx <- rx_trx %>% mutate_at(beg:end, funs(as.double(.)))

rx_trx$total <- rowSums(rx_trx[ ,beg:end] )
```

```{r}

resp_v1 <- rx_trx %>% group_by(Zip) %>% summarise(t_rx = sum(total))
```
```


city, Zip, Specialty, Product_Group makes a unique id
```{r}
rx_trx %>% dplyr::group_by(city, Zip, Specialty, Product_Group) %>%
  mutate(rn = row_number()) %>% 
  arrange(city, Zip, Specialty, Product_Group, rn) %>% 
  filter(rn > 1) %>%
  select(city, Zip, Specialty, Product_Group, PG_Name, rn)
```




```{r}
df_names
```


```{r}
race <- bind_rows(MA_b02001, NC_b02001, OR_b02001)
age_sex <- bind_rows(MA_s0101, NC_s0101, OR_s0101)
house_fam <- bind_rows(MA_s1101, NC_s1101, OR_s1101)
martial <- bind_rows(MA_s1201, NC_s1201, OR_s1201)
school_enroll <- bind_rows(MA_s1401, NC_s1401, OR_s1401)
education_attainment <- bind_rows(MA_s1501, NC_s1501, OR_s1501)
poverty <- bind_rows(MA_s1701, NC_s1701, OR_s1701)
income <- bind_rows(MA_s1901, NC_s1901, OR_s1901)
employment <- bind_rows(MA_s2301, NC_s2301, OR_s2301)
```


```{r}
race_k <- race %>% select(1:9)

# these are all totals
names(race_k) <- c("Zip", 
                   "tot_pop", 
                   "white", 
                   "black", 
                   "native", 
                   "asian", 
                   "hawaiian", 
                   "other", 
                   "two_more")


age_sex_k <- age_sex %>%
  select(Zip, HC01_EST_VC01, HC02_EST_VC01, HC03_EST_VC01,
         HC01_EST_VC35, HC02_EST_VC35, HC03_EST_VC35,
         HC01_EST_VC37,  HC01_EST_VC38,  HC01_EST_VC39)

names(age_sex_k) <- c("Zip",
                      "tot_pop",
                      "male_pop",
                      "female_pop",
                      "median_age",
                      "m_median_age",
                      "f_median_age",
                      "age_depen_ratio",
                      "old_depen_ratio",
                      "child_depen_ratio")
                      
age_sex_k <- age_sex %>% 
  select(-HC02_EST_VC01, -HC03_EST_VC01, -ends_with("VC42"), -ends_with("VC43"))
  
names(age_sex_k) <- paste0(names(age_sex_k), "_age_sex")
names(age_sex_k)[1] <- "Zip"
  


house_fam_k <- house_fam %>% 
  select("Zip", 2:7, 12:17,
         HC01_EST_VC27,
         HC01_EST_VC28,
         HC01_EST_VC29,
         HC01_EST_VC32,
         HC01_EST_VC33)

names(house_fam_k) <- c("Zip", 
                        'tot_households', 
                        'tot_households_married',
                        'tot_households_male', 
                        'tot_households_female',
                        'tot_households_nfamily',
                        'avg_household_size',
                        'tot_fam',
                        'tot_fam_married',
                        'tot_fam_male',
                        'tot_fam_female',
                        'tot_fam_nfamily',
                        'avg_fam_size',
                        "1_unit_p",
                        "2_unit_p",
                        "other_type_unit_p",
                        "tot_owner_units_p",
                        "tot_renter_units_p")

# if it's too much then just use the first 7 cols
martial_k <- martial %>% 
  select(Zip, starts_with("HC02"), starts_with("HC03"), starts_with("HC04"),
         starts_with("HC05"), starts_with("HC06")) %>%
  select(-ends_with("VC39"))

names(martial_k) <- paste0(names(martial_k), "_martial")
names(martial_k)[1] <- "Zip"

# names(martial_k) <- c("Zip",
#                       "tot_pop_over_15",
#                       "now_married_per",
#                       "widowed_per",
#                       "divorced_per",
#                       "separated_per",
#                       "never_married_per")

# school enrollment
school_enroll_k <- school_enroll %>% 
  select(Zip, starts_with("HC02"), starts_with("HC04"),
         starts_with("HC06"))

names(school_enroll_k) <- paste0(names(school_enroll_k), "_enroll")
names(school_enroll_k)[1] <- "Zip"

# Education attainment
education_attainment_k <- education_attainment %>% 
  select(Zip, starts_with("HC02"), starts_with("HC04"),
         starts_with("HC06"))

names(education_attainment_k) <- paste0(names(education_attainment_k), "_edu")
names(education_attainment_k)[1] <- "Zip"

#Proverty
poverty_k <- poverty %>% 
  select(Zip, starts_with("HC03"))

names(poverty_k) <- paste0(names(poverty_k), "_poverty")
names(poverty_k)[1] <- "Zip"

# Income
# needs to be changed into percentages? or it looks like it already is
income_k <- income %>%
  select(-ends_with("VC18"), -ends_with("VC19"), -ends_with("VC20"))

names(income_k) <- paste0(names(income_k), "_income")
names(income_k)[1] <- "Zip"

# Employment
employment_k <- employment %>%
  select(Zip, starts_with('HC02'), starts_with('HC03'),starts_with('HC04'))

names(employment_k) <- paste0(names(employment_k), "_empl")
names(employment_k)[1] <- "Zip"
```


```{r}
joined_dem <- race_k %>% 
  inner_join(age_sex_k, "Zip") %>%
  inner_join(house_fam_k, "Zip") %>%
  inner_join(martial_k,"Zip") %>%
  inner_join(school_enroll_k, "Zip") %>%
  inner_join(education_attainment_k, "Zip") %>%
  inner_join(poverty_k, "Zip") %>%
  inner_join(income_k, "Zip") %>%
  inner_join(employment_k, "Zip")
```

Replace non numeric with empty string and cast to double
```{r}
dem_c <- joined_dem %>% 
  mutate_at(2:ncol(joined_dem), funs(ReplaceNonNum(.))) 

dem_c[dem_c == ""] <- NA

dem_c <- dem_c %>% 
  mutate_at(2:ncol(dem_c), funs(as.double(.))) 

dem_c %>% mutate(white_p = white / tot_pop.x) %>% select(tot_pop.x, white, white_p) %>% filter(white == 0)
```

Check missing values
```{r}
col_names <- names(joined_dem)

missing_values <- c()
foo <- c()

for(name in col_names) {
  mis_zip <- dem_c %>% 
    filter(is.na(get(name))) %>% pull(Zip)
  
  org_missing <- joined_dem %>% filter(Zip %in% as.character(mis_zip))
  foo <- org_missing %>% pull(get(name))
  missing_values <- c(missing_values, foo)
}

table(missing_values)
```

```{r}
dem_c <- dem_c %>% 
  mutate(white_p = white / tot_pop.x,
         black_p = black / tot_pop.x,
         native_p = native / tot_pop.x,
         asian_p = asian / tot_pop.x,
         hawaiian_p = hawaiian / tot_pop.x,
         other_p = other / tot_pop.x,
         two_more_p = two_more / tot_pop.x)
```


















Scratch
They are percentages
```{r}
names(dem_c)

age_sex_k

foo <- age_sex %>% select(5:56) %>% 
  select(starts_with("HC01")) %>%
  mutate_all(funs(as.double(.)))

foo$total <- rowSums(foo)

foo$total
```




